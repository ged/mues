<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muesconfig PUBLIC "-//FAERIEMUD//MUES Config v0.02//EN"
     "http://mues.FaerieMUD.org/dtds/muesconfig.dtd">

<muesconfig version="1.1" time-stamp="$Date: 2002/10/28 00:11:10 $">

  <!--

  This is an example of a minimal configuration file. It is fairly close to what
  is used as the default configuration if a MUES::Config object is instantiated
  without any argument. For the actual defaults, see the end of
  lib/mues/Config.rb.

  $Id: minimal-config.xml,v 1.6 2002/10/28 00:11:10 deveiant Exp $

  -->

  <!-- General server configuration:
	server-name:		The name of the server
    server-description:	A short description of the server
	server-admin:		The email address of the primary contact for the server.
    root-dir:			The directory the server should consider its root. All
						relative paths will have this path prepended.
	motd:				The "message of the day" -- the text printed after a
						user logs in. Leading tab characters will be stripped,
						but leading spaces will not.
  -->
  <general>
	<server-name>Experimental MUD</server-name>
	<server-description>An experimental MUES server.</server-description>
	<server-admin>MUES Admin &lt;muesadmin@localhost&gt;</server-admin>
	<root-dir>.</root-dir>
	<motd>
	  MUES Server Command Shell:
	  /help for help
	  /quit to disconnect
	  /shutdown to halt the server (admin privileges required)
	</motd>
  </general>


  <!-- Engine (core) configuration -->
  <engine>

	<!-- Engine config:
		tick-length:			Number of floating-point seconds between tick events
		exception-stack-size:	Number of untrapped exceptions to keep around
								for diagnostics
		debug-level:			Starting Engine debugging level
		poll-interval:			Floating-point seconds between poll (IO) loops.
	-->
	<tick-length>1.0</tick-length>
	<exception-stack-size>10</exception-stack-size>
	<debug-level>0</debug-level>
	<poll-interval>0.05</poll-interval>

	<!-- Engine's EventQueues configuration:

		The regular event queue handles most kinds of events, and the privileged
		one handles events which require a less restricted $SAFE level.

		minworkers:		Minimum number of worker threads running
		maxworkers:		Maximum number of worker threads running
		threshold:		Number of floating point seconds between changes to
						the worker thread count.
		safelevel:		What worker threads will set their $SAFE to when
						starting up. Change this at your peril. =:)
	 -->
	<eventqueue>
	  <minworkers>5</minworkers>
	  <maxworkers>50</maxworkers>
	  <threshold>2</threshold>
	  <safelevel>2</safelevel>
	</eventqueue>

	<privilegedeventqueue>
	  <minworkers>2</minworkers>
	  <maxworkers>5</maxworkers>
	  <threshold>1.5</threshold>
	  <safelevel>1</safelevel>
	</privilegedeventqueue>

	<!-- Engine objectstore config:

		This objectstore stores persistant engine data like user accounts, ban
		tables, tick count, etc. See lib/mues/os-extensions and the
		documentation for MUES::ObjectStore for more on these parameters.

		backend:		The name of the backing store to use.
		memorymanager:	The name of the memory manager to use.

	-->
	<objectstore name="engine">
	  <backend class="BerkeleyDB" />
	  <memorymanager class="Null" />
	</objectstore>

	<!-- Engine Listener config:
	
		A list of "listener" objects to create on startup. The class
		parameter specifies what MUES::Listener derivative to load, and the name
		serves as a unique key for each instance.

	-->
	<listeners>

	  <!-- Telnet listener: MUES::TelnetOutputFilter -->
	  <listener class="Telnet" name="telnet">
		<param name="bind-port">4848</param>
		<param name="bind-address">0.0.0.0</param>
		<param name="use-wrapper">false</param>
	  </listener>

	</listeners>
  </engine>

  <!-- MUES::LoginSession configuration:
		maxtries:	Maximum number of login attempts before disconnecting.
		timeout:	Number of seconds to allow for login before disconnecting.
		banner:		Text to display before first login attempt. Leading tab
					characters will be stripped; leading spaces will not.
		userprompt:	The text used to prompt for the username
		passprompt:	The text used to prompt for the password
	 -->
  <login>
	<maxtries>3</maxtries>
	<timeout>120</timeout>
	<banner>

	  --- <?config general.server-name?> ---------------
	  <?config general.server-description?>
	  Contact: <?config general.server-admin?>

	</banner>
	<userprompt>Username: </userprompt>
	<passprompt>Password: </passprompt>
  </login>


  <!-- Logging system configuration (Log4R format). Empty means use MUES::Log's
		default configuration (everything to STDERR). -->
  <logging>
	<log4r_config>
	  <!-- Log4R pre-config -->
	  <pre_config>
		<parameter name="logpath" value="server/log" />
		<parameter name="colorPattern" value="\e[1;32m[%d] [%l] %C:\e[0m %.1024m" />
		<parameter name="plainPattern" value="[%d] [%l] %C: %.1024m" />
	  </pre_config>
	  
	  <!-- Log Outputters -->
	  <outputter type="IOOutputter" name="console" fdno="2">
		<formatter type="PatternFormatter" pattern="#{colorPattern}"
		  date_pattern="%Y/%m/%d %H:%M:%S %Z" />
	  </outputter>
	  <outputter type="FileOutputter" name="serverlog"
		filename="#{logpath}/server.log" trunc="false">
		<formatter type="PatternFormatter" pattern="#{plainPattern}"
		  date_pattern="%Y/%m/%d %H:%M:%S %Z" />
	  </outputter>
	  <outputter type="FileOutputter" name="errorlog"
		filename="#{logpath}/error.log" trunc="true">
		<formatter type="PatternFormatter" pattern="#{plainPattern}"
		  date_pattern="%Y/%m/%d %H:%M:%S %Z" />
	  </outputter>
	  <outputter type="FileOutputter" name="environmentlog"
		filename="#{logpath}/environments.log" trunc="false">
		<formatter type="PatternFormatter" pattern="#{plainPattern}"
		  date_pattern="%Y/%m/%d %H:%M:%S %Z" />
	  </outputter>
	  
	  <!-- Loggers -->
	  <logger name="MUES::Engine" level="INFO"  outputters="serverlog" />
	  <logger name="MUES"         level="WARN"  outputters="errorlog" />
	  <logger name="root"         level="CRIT"  outputters="console" />
	</log4r_config>
  </logging>

  
  <!-- MUES::Environments which are to be loaded at startup:
    envpath:    One or more directories to search for environment class files.
	name:		The name of the environment instance in the Engine. This is the
				name that will be used to connect or refer to the environment
				from the command shell.
	class:		The MUES::Environment derivative that should be used as the
				argument to the Environment factory. This accepts any valid
				MUES::FactoryMethods-style class name. See
				MUES::FactoryMethods::create for more about how to specify a
				valid class name.
	description: The description string that is shown when listing environments
				in the server.
  -->
  <environments>
	<envpath>
	  <directory><?config general.root-dir?>/server/environments</directory>
	</envpath>
	<environment name="null" class="Null">
	  <description>A testing environment without any surroundings.</description>
	</environment>
  </environments>

  
  <!-- MUES::CommandShell configuration:
	commandpath:	A list of directories to search for command definitions.
	shell-class:	Which class to instantiate for users' command shells.
    table-class:	Which class to instantiate for the users' command shell
					command lookup table.
    parser-class:	Which class to instantiate to parse command files.

    Parameters are specific to the configured class.
  -->
  <commandshell shell-class="MUES::CommandShell">
	<commandpath>
	  <directory><?config general.root-dir?>/server/shellCommands</directory>
	</commandpath>
	<param name="reload-interval">50</param>
	<param name="default-prompt">mues&gt; </param>
	<param name="command-prefix">/</param>
  </commandshell>

</muesconfig>
